{"ast":null,"code":"var _jsxFileName = \"/Users/kristie/Desktop/antrace/src/pages/LandingPage/components/Main/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { RowFlex, ColumnFlex, Screen } from \"../../styles\";\nimport { Picture, HeavyText, LightText } from \"./styles\";\nimport { useTable } from \"react-table\";\nimport Button from \"./Button\";\nimport { useSelector } from \"react-redux\";\nimport Calculation from \"../calculation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [ants, setAnts] = useState([]);\n  const [startRaceState, setStartRace] = useState(0);\n  const [getDataClicked, setgetDataClicked] = useState(false);\n  const [raceState, setRaceState] = useState('Not yet run');\n  const [likelihoods, setLikelihoods] = useState([]);\n\n  const onGetDataClick = () => {\n    setgetDataClicked(true);\n    fetch(\"https://sg-ants-server.herokuapp.com/ants\").then(res => res.json()).then(result => {\n      result.ants[0].calculation = 'Not yet run';\n      result.ants[1].calculation = 'Not yet run';\n      result.ants[2].calculation = 'Not yet run';\n      result.ants[3].calculation = 'Not yet run';\n      result.ants[4].calculation = 'Not yet run';\n      result.ants[0].calculation = 'Not yet run';\n      result.ants[1].calculation = 'Not yet run';\n      result.ants[2].calculation = 'Not yet run';\n      result.ants[3].calculation = 'Not yet run';\n      result.ants[4].calculation = 'Not yet run';\n      setIsLoaded(true);\n      setAnts(Object.keys(result).map(key => result[key])[0]);\n      setgetDataClicked(false);\n      const likelihoods = generateAntWinLikelihoodCalculator;\n      setLikelihoods({\n        likelihoods\n      });\n      console.log(likelihoods);\n      generateAntWinLikelihoodCalculator();\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  };\n\n  const onStartRaceClick = () => {\n    console.log(ants);\n  };\n\n  const receiveCalculation = (index, calculation) => {\n    return {\n      payload: {\n        index,\n        calculation\n      }\n    };\n  };\n\n  const calculate = ant => {\n    return new Promise(resolve => {\n      resolve(ant);\n    });\n  };\n\n  const onconsoleClick = (ant, index) => dispatch => {\n    const generateCalculation = generateAntWinLikelihoodCalculator();\n    return generateCalculation(ant => {\n      calculate(ant).then(calculation => {\n        dispatch(receiveCalculation(index, calculation));\n      });\n      console.log(generateCalculation);\n    });\n  };\n\n  function generateAntWinLikelihoodCalculator() {\n    const delay = 7000 + Math.random() * 7000;\n    const likelihoodOfAntWinning = Math.random();\n    return callback => {\n      setTimeout(() => {\n        callback(likelihoodOfAntWinning);\n      }, delay);\n    };\n  }\n\n  const data = React.useMemo(() => ants);\n  const columns = React.useMemo(() => [{\n    Header: 'Name',\n    accessor: 'name' // accessor is the \"key\" in the data\n\n  }, {\n    Header: 'Length',\n    accessor: 'length'\n  }, {\n    Header: 'Color',\n    accessor: 'color'\n  }, {\n    Header: 'Weight',\n    accessor: 'weight'\n  }, {\n    Header: 'State of Calcluation',\n    accessor: 'calculation'\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n\n  const renderStep = () => {\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error retrieving ant data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 20\n      }, this);\n    } else if (getDataClicked) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading ant data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(RowFlex, {\n        children: /*#__PURE__*/_jsxDEV(ColumnFlex, {\n          children: [/*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onGetDataClick,\n              children: \"GET DATA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onStartRaceClick,\n              children: \"START RACE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onconsoleClick,\n              children: \"console RACE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: [\"STATE OF THE RACE: \", raceState]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n              style: {\n                border: 'solid 1px black'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n                  children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n                    style: {\n                      background: 'aliceblue',\n                      color: 'black',\n                      fontWeight: 'bold'\n                    },\n                    children: column.render('Header')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n                children: rows.map(row => {\n                  prepareRow(row);\n                  return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n                    children: row.cells.map(cell => {\n                      return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                        style: {\n                          padding: '10px'\n                        },\n                        children: cell.render('Cell')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 182,\n                        columnNumber: 33\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 29\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: sortedList.map((ants, antIndex) => /*#__PURE__*/_jsxDEV(Calculation, {\n              ant: ants,\n              index: antIndex\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Screen, {\n    children: renderStep()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"bGFEy6roQpBplvtfKJbrhPwZbXU=\", false, function () {\n  return [useTable];\n});\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/kristie/Desktop/antrace/src/pages/LandingPage/components/Main/index.js"],"names":["React","useState","RowFlex","ColumnFlex","Screen","Picture","HeavyText","LightText","useTable","Button","useSelector","Calculation","Main","error","setError","isLoaded","setIsLoaded","ants","setAnts","startRaceState","setStartRace","getDataClicked","setgetDataClicked","raceState","setRaceState","likelihoods","setLikelihoods","onGetDataClick","fetch","then","res","json","result","calculation","Object","keys","map","key","generateAntWinLikelihoodCalculator","console","log","onStartRaceClick","receiveCalculation","index","payload","calculate","ant","Promise","resolve","onconsoleClick","dispatch","generateCalculation","delay","Math","random","likelihoodOfAntWinning","callback","setTimeout","data","useMemo","columns","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","renderStep","border","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","background","color","fontWeight","render","row","getRowProps","cells","cell","getCellProps","padding","sortedList","antIndex"],"mappings":"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","sourcesContent":["import React, { useState }  from \"react\";\nimport { RowFlex, ColumnFlex, Screen } from \"../../styles\";\nimport { Picture, HeavyText, LightText } from \"./styles\";\nimport { useTable } from \"react-table\";\nimport Button from \"./Button\";\nimport { useSelector } from \"react-redux\";\nimport Calculation from \"../calculation\";\n\nexport default function Main() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [ants, setAnts] = useState([]);\n    const [startRaceState, setStartRace] = useState(0);\n    const [getDataClicked, setgetDataClicked] = useState(false);\n    const [raceState, setRaceState] = useState('Not yet run');\n    const [likelihoods, setLikelihoods] = useState([]);\n\n    const onGetDataClick = () => {\n        setgetDataClicked(true);\n        fetch(\"https://sg-ants-server.herokuapp.com/ants\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              result.ants[0].calculation = 'Not yet run';\n              result.ants[1].calculation = 'Not yet run';\n              result.ants[2].calculation = 'Not yet run';\n              result.ants[3].calculation = 'Not yet run';\n              result.ants[4].calculation = 'Not yet run';\n\n              result.ants[0].calculation = 'Not yet run';\n              result.ants[1].calculation = 'Not yet run';\n              result.ants[2].calculation = 'Not yet run';\n              result.ants[3].calculation = 'Not yet run';\n              result.ants[4].calculation = 'Not yet run';\n\n              setIsLoaded(true);\n              setAnts(Object.keys(result).map((key) => result[key])[0]);\n              setgetDataClicked(false);\n            \n              const likelihoods = generateAntWinLikelihoodCalculator;\n              setLikelihoods({ likelihoods });\n              console.log(likelihoods)\n\n\n              generateAntWinLikelihoodCalculator();\n            },\n            (error) => {\n              setIsLoaded(true);\n              setError(error);\n            }\n        )\n    }\n\n\n\n    const onStartRaceClick = () => {\n        \n        console.log(ants)\n      };\n\n     const receiveCalculation = (index, calculation) => {\n        return {\n          payload: { index, calculation },\n        };\n      };\n\n      const calculate = (ant) => {\n        return new Promise((resolve) => {\n          resolve(ant);\n        });\n      };\n\n        const onconsoleClick = (ant, index) => (dispatch) => {\n          const generateCalculation = generateAntWinLikelihoodCalculator();\n        \n          return generateCalculation((ant) => {\n            calculate(ant).then((calculation) => {\n              dispatch(receiveCalculation(index, calculation));\n            });\n          console.log(generateCalculation);\n          });\n        };\n  \n      function generateAntWinLikelihoodCalculator() {\n        const delay = 7000 + Math.random() * 7000;\n        const likelihoodOfAntWinning = Math.random();\n      \n        return (callback) => {\n          setTimeout(() => {\n            callback(likelihoodOfAntWinning);\n          }, delay);\n        };\n      }\n\n\n    const data = React.useMemo(\n        () => ants\n    )\n\n    const columns = React.useMemo(\n        () => [\n          {\n            Header: 'Name',\n            accessor: 'name', // accessor is the \"key\" in the data\n          },\n          {\n            Header: 'Length',\n            accessor: 'length',\n          },\n          {\n            Header: 'Color',\n            accessor: 'color',\n          },\n          {\n            Header: 'Weight',\n            accessor: 'weight',\n          },\n          {\n            Header: 'State of Calcluation',\n            accessor: 'calculation',\n          },\n        ],\n        []\n    )\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n      } = useTable({ columns, data })\n    \n    const renderStep = () => {\n        if (error) {\n            return <div>Error retrieving ant data</div>;\n          } else if (getDataClicked){\n            return <div>Loading ant data...</div>;\n          } else {\n            return (\n                <RowFlex>\n                <ColumnFlex>\n                <RowFlex>\n                    <Button onClick={onGetDataClick}>GET DATA</Button>\n                </RowFlex>\n                <RowFlex>\n                    <Button onClick={onStartRaceClick}>START RACE</Button>\n                </RowFlex>\n                <RowFlex>\n                    <Button onClick={onconsoleClick}>console RACE</Button>\n                </RowFlex>\n                <RowFlex>\n                    STATE OF THE RACE: {raceState}\n                </RowFlex>\n                <RowFlex>\n                <table {...getTableProps()} style={{ border: 'solid 1px black' }}>\n                    <thead>\n                        {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                            <th\n                                {...column.getHeaderProps()}\n                                style={{\n                                background: 'aliceblue',\n                                color: 'black',\n                                fontWeight: 'bold',\n                                }}\n                            >\n                                {column.render('Header')}\n                            </th>\n                            ))}\n                        </tr>\n                        ))}\n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                        {rows.map(row => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                                return (\n                                <td\n                                    {...cell.getCellProps()}\n                                    style={{\n                                    padding: '10px'\n                                    }}\n                                >\n                                    {cell.render('Cell')}\n                                </td>\n                                )\n                            })}\n                            </tr>\n                        )\n                        })}\n                    </tbody>\n                    </table>\n                </RowFlex>\n                <RowFlex>\n                {sortedList.map((ants, antIndex) => (\n                <Calculation ant={ants} index={antIndex} />\n                ))}\n                </RowFlex>\n                </ColumnFlex>\n                </RowFlex>\n            );\n          }\n    }\n\n  return (\n    <Screen>\n        {renderStep()}\n    </Screen>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}