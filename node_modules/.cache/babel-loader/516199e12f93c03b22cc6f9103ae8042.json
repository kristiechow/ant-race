{"ast":null,"code":"var _jsxFileName = \"/Users/kristie/Desktop/ant-race/src/pages/LandingPage/components/Main/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { RowFlex, ColumnFlex, Screen } from \"../../styles\";\nimport { Picture, HeavyText, LightText } from \"./styles\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [ants, setAnts] = useState([]);\n  const [startRaceState, setStartRace] = useState(0);\n  const [antsState, setAntsState] = useState([]);\n\n  const onGetDataClick = () => {\n    fetch(\"https://sg-ants-server.herokuapp.com/ants\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setAnts(result);\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  };\n\n  const onStartRaceClick = event => {\n    setStartRace(event.target.value);\n    console.log(startRaceState);\n  };\n\n  const validateFirstPage = () => {};\n\n  const renderStep = () => {\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error retrieving ant data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 20\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(RowFlex, {\n        children: /*#__PURE__*/_jsxDEV(ColumnFlex, {\n          children: [/*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onGetDataClick,\n              children: \"GET DATA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              children: \"START RACE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: ants.map(ant => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [ant.color, \" \", ant.length]\n              }, ant.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Screen, {\n    children: renderStep()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"Dyjp7IbA1T4kVA2AHKkQdmZeNoI=\");\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/kristie/Desktop/ant-race/src/pages/LandingPage/components/Main/index.js"],"names":["React","useState","RowFlex","ColumnFlex","Screen","Picture","HeavyText","LightText","Button","Main","error","setError","isLoaded","setIsLoaded","ants","setAnts","startRaceState","setStartRace","antsState","setAntsState","onGetDataClick","fetch","then","res","json","result","onStartRaceClick","event","target","value","console","log","validateFirstPage","renderStep","map","ant","color","length","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,MAA9B,QAA4C,cAA5C;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,SAA7B,QAA8C,UAA9C;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACe,cAAD,EAAiBC,YAAjB,IAAiChB,QAAQ,CAAC,CAAD,CAA/C;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMmB,cAAc,GAAG,MAAM;AACzBC,IAAAA,KAAK,CAAC,2CAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVZ,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,OAAO,CAACU,MAAD,CAAP;AACD,KANL,EAOKf,KAAD,IAAW;AACTG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAVL;AAYH,GAbD;;AAeA,QAAMgB,gBAAgB,GAAIC,KAAD,IAAW;AAClCV,IAAAA,YAAY,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYf,cAAZ;AACD,GAHD;;AAKA,QAAMgB,iBAAiB,GAAG,MAAM,CAC/B,CADD;;AAGA,QAAMC,UAAU,GAAG,MAAM;AACrB,QAAIvB,KAAJ,EAAW;AACP,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFH,MAES,IAAI,CAACE,QAAL,EAAe;AACpB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFM,MAEA;AACL,0BACI,QAAC,OAAD;AAAA,+BACA,QAAC,UAAD;AAAA,kCACA,QAAC,OAAD;AAAA,mCACI,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAEQ,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADA,eAIA,QAAC,OAAD;AAAA,mCACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAJA,eAOA,QAAC,OAAD;AAAA,mCACI;AAAA,wBACKN,IAAI,CAACoB,GAAL,CAASC,GAAG,iBACT;AAAA,2BACKA,GAAG,CAACC,KADT,OACiBD,GAAG,CAACE,MADrB;AAAA,iBAASF,GAAG,CAACG,IAAb;AAAA;AAAA;AAAA;AAAA,sBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADJ;AAqBD;AACN,GA5BD;;AA8BF,sBACE,QAAC,MAAD;AAAA,cACKL,UAAU;AADf;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAjEuBxB,I;;KAAAA,I","sourcesContent":["import React, { useState }  from \"react\";\nimport { RowFlex, ColumnFlex, Screen } from \"../../styles\";\nimport { Picture, HeavyText, LightText } from \"./styles\";\nimport Button from \"./Button\";\n\nexport default function Main() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [ants, setAnts] = useState([]);\n    const [startRaceState, setStartRace] = useState(0);\n    const [antsState, setAntsState] = useState([]);\n\n    const onGetDataClick = () => {\n        fetch(\"https://sg-ants-server.herokuapp.com/ants\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              setIsLoaded(true);\n              setAnts(result);\n            },\n            (error) => {\n              setIsLoaded(true);\n              setError(error);\n            }\n        )\n    }\n\n    const onStartRaceClick = (event) => {\n      setStartRace(event.target.value);\n      console.log(startRaceState);\n    };\n\n    const validateFirstPage = () => {\n    }\n    \n    const renderStep = () => {\n        if (error) {\n            return <div>Error retrieving ant data</div>;\n          } else if (!isLoaded) {\n            return <div>Loading...</div>;\n          } else {\n            return (\n                <RowFlex>\n                <ColumnFlex>\n                <RowFlex>\n                    <Button onClick={onGetDataClick}>GET DATA</Button>\n                </RowFlex>\n                <RowFlex>\n                    <Button>START RACE</Button>\n                </RowFlex>\n                <RowFlex>\n                    <ul>    \n                        {ants.map(ant => (\n                            <li key={ant.name}>\n                                {ant.color} {ant.length}\n                            </li>\n                        ))}\n                    </ul>\n                </RowFlex>\n                </ColumnFlex>\n                </RowFlex>\n            );\n          }\n    }\n\n  return (\n    <Screen>\n        {renderStep()}\n    </Screen>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}