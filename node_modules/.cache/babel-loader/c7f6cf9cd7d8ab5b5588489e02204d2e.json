{"ast":null,"code":"var _jsxFileName = \"/Users/kristie/Desktop/antrace/src/pages/LandingPage/components/Main/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { RowFlex, ColumnFlex, Screen } from \"../../styles\";\nimport { Picture, HeavyText, LightText } from \"./styles\";\nimport { useTable } from \"react-table\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [ants, setAnts] = useState([]);\n  const [refreshState, setRefreshState] = useState(false);\n  const [getDataClicked, setgetDataClicked] = useState(false);\n  const [raceState, setRaceState] = useState('Not yet run');\n  const [likelihoods, setLikelihoods] = useState([]);\n\n  const onGetDataClick = () => {\n    setgetDataClicked(true);\n    fetch(\"https://sg-ants-server.herokuapp.com/ants\").then(res => res.json()).then(result => {\n      result.ants[0].calculation = 'Not yet run';\n      result.ants[1].calculation = 'Not yet run';\n      result.ants[2].calculation = 'Not yet run';\n      result.ants[3].calculation = 'Not yet run';\n      result.ants[4].calculation = 'Not yet run';\n      result.ants[0].likelihood = 0;\n      result.ants[1].likelihood = 0;\n      result.ants[2].likelihood = 0;\n      result.ants[3].likelihood = 0;\n      result.ants[4].likelihood = 0;\n      setIsLoaded(true);\n      setAnts(Object.keys(result).map(key => result[key])[0]);\n      setgetDataClicked(false);\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  };\n\n  const onStartRaceClick = () => {\n    setRaceState(\"In progress\");\n    setRefreshState(true);\n    const theAnts = ants.map(l => Object.assign({}, l));\n\n    for (var i = 0; i < ants.length; i++) {\n      calculateLikelihood(theAnts[i], i);\n      theAnts[i].calculation = 'In progress';\n    }\n\n    setAnts(theAnts);\n    loop();\n    console.log(ants);\n  };\n\n  const loop = () => {\n    while (refreshState == true) {\n      const theAnts = ants.map(l => Object.assign({}, l));\n      setAnts(theAnts);\n\n      if (refreshState == true) {\n        const theAnts = ants.map(l => Object.assign({}, l));\n        setAnts(theAnts);\n      }\n\n      if (refreshState == true) setTimeout(loop, 0);\n    }\n  };\n\n  const calculate = ant => {\n    return new Promise(resolve => {\n      resolve(ant);\n    });\n  };\n\n  const calculateLikelihood = (ant, index) => {\n    const generateCalculation = generateAntWinLikelihoodCalculator();\n    const theAnts = ants.map(l => Object.assign({}, l));\n    return generateCalculation(ant => {\n      calculate(ant).then(calculation => {\n        theAnts[index].likelihood = calculation;\n      });\n    });\n  };\n\n  const onconsoleClick2 = () => {\n    console.log(ants);\n  };\n\n  function generateAntWinLikelihoodCalculator() {\n    const delay = 7000 + Math.random() * 7000;\n    const likelihoodOfAntWinning = Math.random();\n    return callback => {\n      setTimeout(() => {\n        callback(likelihoodOfAntWinning);\n      }, delay);\n    };\n  }\n\n  var data = ants;\n  const columns = React.useMemo(() => [{\n    Header: 'Name',\n    accessor: 'name' // accessor is the \"key\" in the data\n\n  }, {\n    Header: 'Length',\n    accessor: 'length'\n  }, {\n    Header: 'Color',\n    accessor: 'color'\n  }, {\n    Header: 'Weight',\n    accessor: 'weight'\n  }, {\n    Header: 'State of Calcluation',\n    accessor: 'calculation'\n  }, {\n    Header: 'Win Likelihood',\n    accessor: 'likelihood'\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n\n  const renderStep = () => {\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error retrieving ant data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 20\n      }, this);\n    } else if (getDataClicked) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading ant data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(RowFlex, {\n        children: /*#__PURE__*/_jsxDEV(ColumnFlex, {\n          children: [/*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onGetDataClick,\n              children: \"GET DATA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onStartRaceClick,\n              children: \"START RACE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onconsoleClick2,\n              children: \"console\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: [\"STATE OF THE RACE: \", raceState]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: isLoaded == true && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: ants[0].likelihood\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n              style: {\n                border: 'solid 1px black'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n                  children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n                    style: {\n                      background: 'aliceblue',\n                      color: 'black',\n                      fontWeight: 'bold'\n                    },\n                    children: column.render('Header')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n                children: rows.map(row => {\n                  prepareRow(row);\n                  return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n                    children: row.cells.map(cell => {\n                      return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                        style: {\n                          padding: '10px'\n                        },\n                        children: cell.render('Cell')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 202,\n                        columnNumber: 33\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 29\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Screen, {\n    children: renderStep()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"5Q0Hc7XJzWra/AoEWNn5e8g+OOQ=\", false, function () {\n  return [useTable];\n});\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/kristie/Desktop/antrace/src/pages/LandingPage/components/Main/index.js"],"names":["React","useState","useEffect","useDispatch","RowFlex","ColumnFlex","Screen","Picture","HeavyText","LightText","useTable","Button","Main","error","setError","isLoaded","setIsLoaded","ants","setAnts","refreshState","setRefreshState","getDataClicked","setgetDataClicked","raceState","setRaceState","likelihoods","setLikelihoods","onGetDataClick","fetch","then","res","json","result","calculation","likelihood","Object","keys","map","key","onStartRaceClick","theAnts","l","assign","i","length","calculateLikelihood","loop","console","log","setTimeout","calculate","ant","Promise","resolve","index","generateCalculation","generateAntWinLikelihoodCalculator","onconsoleClick2","delay","Math","random","likelihoodOfAntWinning","callback","data","columns","useMemo","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","renderStep","border","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","background","color","fontWeight","render","row","getRowProps","cells","cell","getCellProps","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect }  from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { RowFlex, ColumnFlex, Screen } from \"../../styles\";\nimport { Picture, HeavyText, LightText } from \"./styles\";\nimport { useTable } from \"react-table\";\nimport Button from \"./Button\";\n\nexport default function Main() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [ants, setAnts] = useState([]);\n    const [refreshState, setRefreshState] = useState(false);\n    const [getDataClicked, setgetDataClicked] = useState(false);\n    const [raceState, setRaceState] = useState('Not yet run');\n    const [likelihoods, setLikelihoods] = useState([]);\n\n  \n\n    const onGetDataClick = () => {\n        setgetDataClicked(true);\n        fetch(\"https://sg-ants-server.herokuapp.com/ants\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              result.ants[0].calculation = 'Not yet run';\n              result.ants[1].calculation = 'Not yet run';\n              result.ants[2].calculation = 'Not yet run';\n              result.ants[3].calculation = 'Not yet run';\n              result.ants[4].calculation = 'Not yet run';\n\n              result.ants[0].likelihood = 0;\n              result.ants[1].likelihood = 0;\n              result.ants[2].likelihood = 0;\n              result.ants[3].likelihood = 0;\n              result.ants[4].likelihood = 0;\n\n              setIsLoaded(true);\n              setAnts(Object.keys(result).map((key) => result[key])[0]);\n              setgetDataClicked(false);\n\n            },\n            (error) => {\n              setIsLoaded(true);\n              setError(error);\n            }\n        )\n    }\n\n    const onStartRaceClick = () => {\n        setRaceState(\"In progress\");\n        setRefreshState(true);\n        const theAnts = ants.map(l => Object.assign({}, l));\n\n        for (var i = 0; i < ants.length; i++){\n          calculateLikelihood(theAnts[i], i);\n          theAnts[i].calculation = 'In progress';\n        }\n        setAnts(theAnts);\n        loop();\n        console.log(ants);\n      };\n\n      const loop = () => {\n\n        while (refreshState == true) {\n          const theAnts = ants.map(l => Object.assign({}, l));\n          setAnts(theAnts);\n           if (refreshState == true){\n            const theAnts = ants.map(l => Object.assign({}, l));\n            setAnts(theAnts);\n           }\n\n           if (refreshState == true) setTimeout(loop, 0);\n        }\n      }\n\n      const calculate = (ant) => {\n        return new Promise((resolve) => {\n          resolve(ant);\n        });\n      };\n\n    const calculateLikelihood = (ant, index) => { \n      const generateCalculation = generateAntWinLikelihoodCalculator();\n      const theAnts = ants.map(l => Object.assign({}, l));\n      \n      return generateCalculation((ant) => {\n        calculate(ant).then((calculation) => {\n          theAnts[index].likelihood = calculation\n        });\n    });\n    };\n\n    const onconsoleClick2 = () => {\n      console.log(ants);\n    };\n        \n      function generateAntWinLikelihoodCalculator() {\n        const delay = 7000 + Math.random() * 7000;\n        const likelihoodOfAntWinning = Math.random();\n      \n        return (callback) => {\n          setTimeout(() => {\n            callback(likelihoodOfAntWinning);\n          }, delay);\n        };\n      }\n\n    var data = ants\n\n    const columns = React.useMemo(\n        () => [\n          {\n            Header: 'Name',\n            accessor: 'name', // accessor is the \"key\" in the data\n          },\n          {\n            Header: 'Length',\n            accessor: 'length',\n          },\n          {\n            Header: 'Color',\n            accessor: 'color',\n          },\n          {\n            Header: 'Weight',\n            accessor: 'weight',\n          },\n          {\n            Header: 'State of Calcluation',\n            accessor: 'calculation',\n          },\n          {\n            Header: 'Win Likelihood',\n            accessor: 'likelihood',\n          },\n        ],\n        []\n    )\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n      } = useTable({ columns, data })\n    \n    const renderStep = () => {\n        if (error) {\n            return <div>Error retrieving ant data</div>;\n          } else if (getDataClicked){\n            return <div>Loading ant data...</div>;\n          } else {\n            return (\n                <RowFlex>\n                <ColumnFlex>\n                <RowFlex>\n                    <Button onClick={onGetDataClick}>GET DATA</Button>\n                </RowFlex>\n                <RowFlex>\n                    <Button onClick={onStartRaceClick}>START RACE</Button>\n                </RowFlex>\n                <RowFlex>\n                    <Button onClick={onconsoleClick2}>console</Button>\n                </RowFlex>\n                <RowFlex>\n                    STATE OF THE RACE: {raceState}\n                </RowFlex>\n                <RowFlex>\n                  {isLoaded == true && (\n                    <p>{ants[0].likelihood}</p>\n                  )}\n                </RowFlex>\n                <RowFlex>\n                <table {...getTableProps()} style={{ border: 'solid 1px black' }}>\n                    <thead>\n                        {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                            <th\n                                {...column.getHeaderProps()}\n                                style={{\n                                background: 'aliceblue',\n                                color: 'black',\n                                fontWeight: 'bold',\n                                }}\n                            >\n                                {column.render('Header')}\n                            </th>\n                            ))}\n                        </tr>\n                        ))}\n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                        {rows.map(row => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                                return (\n                                <td\n                                    {...cell.getCellProps()}\n                                    style={{\n                                    padding: '10px'\n                                    }}\n                                >\n                                    {cell.render('Cell')}\n                                </td>\n                                )\n                            })}\n                            </tr>\n                        )\n                        })}\n                    </tbody>\n                    </table>\n                </RowFlex>\n                </ColumnFlex>\n                </RowFlex>\n            );\n          }\n    }\n\n  return (\n    <Screen>\n        {renderStep()}\n    </Screen>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}