{"ast":null,"code":"var _jsxFileName = \"/Users/kristie/Desktop/ant-race/src/pages/LandingPage/components/Main/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { RowFlex, ColumnFlex, Screen } from \"../../styles\";\nimport { Picture, HeavyText, LightText } from \"./styles\";\nimport { useTable } from \"react-table\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [ants, setAnts] = useState([]);\n  const [startRaceState, setStartRace] = useState(0);\n  const [getDataClicked, setgetDataClicked] = useState(false);\n  const [antsState, setAntsState] = useState([]);\n\n  const onGetDataClick = () => {\n    setgetDataClicked(true);\n    fetch(\"https://sg-ants-server.herokuapp.com/ants\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setAnts(Object.keys(result).map(key => result[key])[0]);\n      setgetDataClicked(false);\n      console.log(result);\n      console.log(Object.keys(result).map(key => result[key])[0]);\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  };\n\n  const onStartRaceClick = event => {\n    setStartRace(event.target.value);\n    console.log(startRaceState);\n  };\n\n  const validateFirstPage = () => {};\n\n  const data = React.useMemo(() => ants);\n  const columns = React.useMemo(() => [{\n    Header: 'Name',\n    accessor: 'name' // accessor is the \"key\" in the data\n\n  }, {\n    Header: 'Length',\n    accessor: 'length'\n  }, {\n    Header: 'Color',\n    accessor: 'color'\n  }, {\n    Header: 'Weight',\n    accessor: 'weight'\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n\n  const renderStep = () => {\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error retrieving ant data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 20\n      }, this);\n    } else if (getDataClicked) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(RowFlex, {\n        children: /*#__PURE__*/_jsxDEV(ColumnFlex, {\n          children: [/*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onGetDataClick,\n              children: \"GET DATA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              children: \"START RACE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: ants.map(ant => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [ant.name, \" \", ant.length]\n              }, ant.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Screen, {\n    children: renderStep()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"a6VP02TEscWR5pAkdXLUKBUVfMM=\", false, function () {\n  return [useTable];\n});\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/kristie/Desktop/ant-race/src/pages/LandingPage/components/Main/index.js"],"names":["React","useState","RowFlex","ColumnFlex","Screen","Picture","HeavyText","LightText","useTable","Button","Main","error","setError","isLoaded","setIsLoaded","ants","setAnts","startRaceState","setStartRace","getDataClicked","setgetDataClicked","antsState","setAntsState","onGetDataClick","fetch","then","res","json","result","Object","keys","map","key","console","log","onStartRaceClick","event","target","value","validateFirstPage","data","useMemo","columns","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","renderStep","ant","name","length"],"mappings":"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","sourcesContent":["import React, { useState }  from \"react\";\nimport { RowFlex, ColumnFlex, Screen } from \"../../styles\";\nimport { Picture, HeavyText, LightText } from \"./styles\";\nimport { useTable } from \"react-table\";\nimport Button from \"./Button\";\n\nexport default function Main() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [ants, setAnts] = useState([]);\n    const [startRaceState, setStartRace] = useState(0);\n    const [getDataClicked, setgetDataClicked] = useState(false);\n    const [antsState, setAntsState] = useState([]);\n\n    const onGetDataClick = () => {\n        setgetDataClicked(true);\n        fetch(\"https://sg-ants-server.herokuapp.com/ants\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              setIsLoaded(true);\n              setAnts(Object.keys(result).map((key) => result[key])[0]);\n              setgetDataClicked(false);\n              console.log(result);\n              console.log(Object.keys(result).map((key) => result[key])[0]);\n            },\n            (error) => {\n              setIsLoaded(true);\n              setError(error);\n            }\n        )\n    }\n\n    const onStartRaceClick = (event) => {\n      setStartRace(event.target.value);\n      console.log(startRaceState);\n    };\n\n    const validateFirstPage = () => {\n    }\n\n    const data = React.useMemo(\n        () => ants\n    )\n\n    const columns = React.useMemo(\n        () => [\n          {\n            Header: 'Name',\n            accessor: 'name', // accessor is the \"key\" in the data\n          },\n          {\n            Header: 'Length',\n            accessor: 'length',\n          },\n          {\n            Header: 'Color',\n            accessor: 'color',\n          },\n          {\n            Header: 'Weight',\n            accessor: 'weight',\n          },\n        ],\n        []\n    )\n    \n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n      } = useTable({ columns, data })\n    \n    const renderStep = () => {\n        if (error) {\n            return <div>Error retrieving ant data</div>;\n          } else if (getDataClicked){\n            return <div>Loading...</div>;\n          } else {\n            return (\n                <RowFlex>\n                <ColumnFlex>\n                <RowFlex>\n                    <Button onClick={onGetDataClick}>GET DATA</Button>\n                </RowFlex>\n                <RowFlex>\n                    <Button>START RACE</Button>\n                </RowFlex>\n                <RowFlex>\n                    <ul>    \n                    {ants.map(ant => (\n                    <li key={ant.name}>\n                        {ant.name} {ant.length}\n                    </li>\n                    ))}\n                    </ul>\n                </RowFlex>\n                </ColumnFlex>\n                </RowFlex>\n            );\n          }\n    }\n\n  return (\n    <Screen>\n        {renderStep()}\n    </Screen>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}