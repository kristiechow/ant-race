{"ast":null,"code":"import { ADD_ANTS, START_RACE, END_RACE, RECEIVE_CALCULATION, RESET_RACE } from \"./constants\";\nexport const addAnts = data => {\n  return {\n    type: ADD_ANTS,\n    payload: data\n  };\n};\nexport const startRace = data => {\n  return {\n    type: START_RACE,\n    payload: data\n  };\n};\nexport const endRace = () => {\n  return {\n    type: END_RACE\n  };\n};\nexport const resetRace = () => {\n  return {\n    type: RESET_RACE\n  };\n};\nexport const receiveCalculation = (index, calculation) => {\n  return {\n    type: RECEIVE_CALCULATION,\n    payload: {\n      index,\n      calculation\n    }\n  };\n};\n\nconst calculating = (state, ant) => {\n  if (ant.calculation > 0) {\n    return false;\n  }\n\n  return true;\n};\n\nconst calculate = ant => {\n  return new Promise(resolve => {\n    resolve(ant);\n  });\n};\n\nconst getCalculation = (ant, index) => dispatch => {\n  const generateCalculation = generateAntWinLikelihoodCalculator();\n  return generateCalculation(ant => {\n    calculate(ant).then(calculation => {\n      dispatch(receiveCalculation(index, calculation));\n      dispatch(endRace());\n    });\n  });\n};\n\nexport const runCalculation = (ant, index) => (dispatch, getState) => {\n  if (calculating(getState(), ant)) {\n    return dispatch(getCalculation(ant, index));\n  }\n};\n\nfunction generateAntWinLikelihoodCalculator() {\n  var delay = 7000 + Math.random() * 7000;\n  var likelihoodOfAntWinning = Math.random();\n  return function (callback) {\n    setTimeout(function () {\n      callback(likelihoodOfAntWinning);\n    }, delay);\n  };\n}","map":{"version":3,"sources":["/Users/kristie/Desktop/antrace/src/actions/index.js"],"names":["ADD_ANTS","START_RACE","END_RACE","RECEIVE_CALCULATION","RESET_RACE","addAnts","data","type","payload","startRace","endRace","resetRace","receiveCalculation","index","calculation","calculating","state","ant","calculate","Promise","resolve","getCalculation","dispatch","generateCalculation","generateAntWinLikelihoodCalculator","then","runCalculation","getState","delay","Math","random","likelihoodOfAntWinning","callback","setTimeout"],"mappings":"AAAA,SACIA,QADJ,EAEIC,UAFJ,EAGIC,QAHJ,EAIIC,mBAJJ,EAKIC,UALJ,QAMS,aANT;AAQE,OAAO,MAAMC,OAAO,GAAIC,IAAD,IAAU;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAEP,QADD;AAELQ,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,SAAS,GAAIH,IAAD,IAAU;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAEN,UADD;AAELO,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMI,OAAO,GAAG,MAAM;AAC3B,SAAO;AACLH,IAAAA,IAAI,EAAEL;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMS,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLJ,IAAAA,IAAI,EAAEH;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMQ,kBAAkB,GAAG,CAACC,KAAD,EAAQC,WAAR,KAAwB;AACxD,SAAO;AACLP,IAAAA,IAAI,EAAEJ,mBADD;AAELK,IAAAA,OAAO,EAAE;AAAEK,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAFJ,GAAP;AAID,CALM;;AAOP,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAClC,MAAIA,GAAG,CAACH,WAAJ,GAAkB,CAAtB,EAAyB;AACvB,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD,CAND;;AAQA,MAAMI,SAAS,GAAID,GAAD,IAAS;AACzB,SAAO,IAAIE,OAAJ,CAAaC,OAAD,IAAa;AAC9BA,IAAAA,OAAO,CAACH,GAAD,CAAP;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,MAAMI,cAAc,GAAG,CAACJ,GAAD,EAAMJ,KAAN,KAAiBS,QAAD,IAAc;AACnD,QAAMC,mBAAmB,GAAGC,kCAAkC,EAA9D;AAEA,SAAOD,mBAAmB,CAAEN,GAAD,IAAS;AAClCC,IAAAA,SAAS,CAACD,GAAD,CAAT,CAAeQ,IAAf,CAAqBX,WAAD,IAAiB;AACnCQ,MAAAA,QAAQ,CAACV,kBAAkB,CAACC,KAAD,EAAQC,WAAR,CAAnB,CAAR;AACAQ,MAAAA,QAAQ,CAACZ,OAAO,EAAR,CAAR;AACD,KAHD;AAID,GALyB,CAA1B;AAMD,CATD;;AAWA,OAAO,MAAMgB,cAAc,GAAG,CAACT,GAAD,EAAMJ,KAAN,KAAgB,CAACS,QAAD,EAAWK,QAAX,KAAwB;AACpE,MAAIZ,WAAW,CAACY,QAAQ,EAAT,EAAaV,GAAb,CAAf,EAAkC;AAChC,WAAOK,QAAQ,CAACD,cAAc,CAACJ,GAAD,EAAMJ,KAAN,CAAf,CAAf;AACD;AACF,CAJM;;AAQT,SAASW,kCAAT,GAA8C;AAC1C,MAAII,KAAK,GAAG,OAAOC,IAAI,CAACC,MAAL,KAAgB,IAAnC;AACA,MAAIC,sBAAsB,GAAGF,IAAI,CAACC,MAAL,EAA7B;AAEA,SAAO,UAASE,QAAT,EAAmB;AACxBC,IAAAA,UAAU,CAAC,YAAW;AACpBD,MAAAA,QAAQ,CAACD,sBAAD,CAAR;AACD,KAFS,EAEPH,KAFO,CAAV;AAGD,GAJD;AAKD","sourcesContent":["import {\n    ADD_ANTS,\n    START_RACE,\n    END_RACE,\n    RECEIVE_CALCULATION,\n    RESET_RACE,\n  } from \"./constants\";\n  \n  export const addAnts = (data) => {\n    return {\n      type: ADD_ANTS,\n      payload: data,\n    };\n  };\n  \n  export const startRace = (data) => {\n    return {\n      type: START_RACE,\n      payload: data,\n    };\n  };\n  \n  export const endRace = () => {\n    return {\n      type: END_RACE,\n    };\n  };\n  \n  export const resetRace = () => {\n    return {\n      type: RESET_RACE,\n    };\n  };\n  \n  export const receiveCalculation = (index, calculation) => {\n    return {\n      type: RECEIVE_CALCULATION,\n      payload: { index, calculation },\n    };\n  };\n  \n  const calculating = (state, ant) => {\n    if (ant.calculation > 0) {\n      return false;\n    }\n  \n    return true;\n  };\n  \n  const calculate = (ant) => {\n    return new Promise((resolve) => {\n      resolve(ant);\n    });\n  };\n  \n  const getCalculation = (ant, index) => (dispatch) => {\n    const generateCalculation = generateAntWinLikelihoodCalculator();\n  \n    return generateCalculation((ant) => {\n      calculate(ant).then((calculation) => {\n        dispatch(receiveCalculation(index, calculation));\n        dispatch(endRace());\n      });\n    });\n  };\n  \n  export const runCalculation = (ant, index) => (dispatch, getState) => {\n    if (calculating(getState(), ant)) {\n      return dispatch(getCalculation(ant, index));\n    }\n  };\n\n\n   \nfunction generateAntWinLikelihoodCalculator() {\n    var delay = 7000 + Math.random() * 7000;\n    var likelihoodOfAntWinning = Math.random();\n  \n    return function(callback) {\n      setTimeout(function() {\n        callback(likelihoodOfAntWinning);\n      }, delay);\n    };\n  }"]},"metadata":{},"sourceType":"module"}