{"ast":null,"code":"var _jsxFileName = \"/Users/kristie/Desktop/antrace/src/pages/LandingPage/components/Main/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { RowFlex, ColumnFlex, Screen } from \"../../styles\";\nimport { Picture, HeavyText, LightText } from \"./styles\";\nimport { useTable } from \"react-table\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [ants, setAnts] = useState([]);\n  const [getDataClicked, setgetDataClicked] = useState(false);\n  const [raceState, setRaceState] = useState('Not yet run');\n\n  const onGetDataClick = () => {\n    setgetDataClicked(true);\n    fetch(\"https://sg-ants-server.herokuapp.com/ants\").then(res => res.json()).then(result => {\n      result.ants[0].calculation = 'Not yet run';\n      result.ants[1].calculation = 'Not yet run';\n      result.ants[2].calculation = 'Not yet run';\n      result.ants[3].calculation = 'Not yet run';\n      result.ants[4].calculation = 'Not yet run';\n      result.ants[0].likelihood = 0;\n      result.ants[1].likelihood = 0;\n      result.ants[2].likelihood = 0;\n      result.ants[3].likelihood = 0;\n      result.ants[4].likelihood = 0;\n      setIsLoaded(true);\n      setAnts(Object.keys(result).map(key => result[key])[0]);\n      setgetDataClicked(false);\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  };\n\n  const onStartRaceClick = () => {\n    setRaceState(\"In progress...\");\n    var theAnts = ants.map(l => Object.assign({}, l));\n\n    for (var i = 0; i < ants.length; i++) {\n      theAnts[i].calculation = 'In progress';\n      setAnts(theAnts);\n      calculateLikelihood(ants[i], i);\n    }\n  };\n\n  const checkRaceState = () => {\n    var completedCount = 0;\n    var theAnts = ants.map(l => Object.assign({}, l));\n    theAnts = theAnts.sort((a, b) => b.likelihood - a.likelihood);\n    setAnts(theAnts);\n\n    for (var i = 0; i < ants.length; i++) {\n      if (ants[i].calculation == 'Calculated') {\n        completedCount += 1;\n      }\n    }\n\n    if (completedCount == ants.length) {\n      setRaceState(\"Calculated\");\n    }\n  };\n\n  const calculate = ant => {\n    return new Promise(resolve => {\n      resolve(ant);\n    });\n  };\n\n  const calculateLikelihood = (ant, index) => {\n    const generateCalculation = generateAntWinLikelihoodCalculator();\n    ants[index].calculation = 'In progress';\n    return generateCalculation(ant => {\n      calculate(ant).then(calculation => {\n        ants[index].likelihood = calculation;\n        ants[index].calculation = 'Calculated';\n        checkRaceState();\n      });\n    });\n  };\n\n  function generateAntWinLikelihoodCalculator() {\n    const delay = 7000 + Math.random() * 7000;\n    const likelihoodOfAntWinning = Math.random();\n    return callback => {\n      setTimeout(() => {\n        callback(likelihoodOfAntWinning);\n      }, delay);\n    };\n  } // Table Rows and Columns\n\n\n  var data = ants;\n  const columns = React.useMemo(() => [{\n    Header: 'Name',\n    accessor: 'name'\n  }, {\n    Header: 'Length',\n    accessor: 'length'\n  }, {\n    Header: 'Color',\n    accessor: 'color'\n  }, {\n    Header: 'Weight',\n    accessor: 'weight'\n  }, {\n    Header: 'State of Calcluation',\n    accessor: 'calculation'\n  }, {\n    Header: 'Win Likelihood',\n    accessor: 'likelihood'\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n\n  const renderStep = () => {\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error retrieving ant data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 20\n      }, this);\n    } else if (getDataClicked) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading ant data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(RowFlex, {\n        children: /*#__PURE__*/_jsxDEV(ColumnFlex, {\n          children: [/*#__PURE__*/_jsxDEV(RowFlex, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: onGetDataClick,\n              children: \"GET DATA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onStartRaceClick,\n              style: {\n                marginLeft: \"15px\",\n                backgroundColor: \"#38782A\"\n              },\n              children: \"START RACE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: [/*#__PURE__*/_jsxDEV(HeavyText, {\n              children: \"\\\"STATE OF THE RACE: \\\"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(LightText, {\n              children: raceState\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RowFlex, {\n            children: /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n              style: {\n                border: 'solid 1px gray'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n                  children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n                    style: {\n                      background: 'aliceblue',\n                      color: 'black',\n                      fontWeight: 'bold'\n                    },\n                    children: column.render('Header')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n                children: rows.map(row => {\n                  prepareRow(row);\n                  return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n                    children: row.cells.map(cell => {\n                      return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                        style: {\n                          padding: '12px'\n                        },\n                        children: cell.render('Cell')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 188,\n                        columnNumber: 33\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 29\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Screen, {\n    children: renderStep()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"xHPASnfmDRHSFWI11hfOYqi6kTg=\", false, function () {\n  return [useTable];\n});\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/kristie/Desktop/antrace/src/pages/LandingPage/components/Main/index.js"],"names":["React","useState","RowFlex","ColumnFlex","Screen","Picture","HeavyText","LightText","useTable","Button","Main","error","setError","isLoaded","setIsLoaded","ants","setAnts","getDataClicked","setgetDataClicked","raceState","setRaceState","onGetDataClick","fetch","then","res","json","result","calculation","likelihood","Object","keys","map","key","onStartRaceClick","theAnts","l","assign","i","length","calculateLikelihood","checkRaceState","completedCount","sort","a","b","calculate","ant","Promise","resolve","index","generateCalculation","generateAntWinLikelihoodCalculator","delay","Math","random","likelihoodOfAntWinning","callback","setTimeout","data","columns","useMemo","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","renderStep","marginLeft","backgroundColor","border","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","background","color","fontWeight","render","row","getRowProps","cells","cell","getCellProps","padding"],"mappings":"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","sourcesContent":["import React, { useState }  from \"react\";\nimport { RowFlex, ColumnFlex, Screen } from \"../../styles\";\nimport { Picture, HeavyText, LightText } from \"./styles\";\nimport { useTable } from \"react-table\";\nimport Button from \"./Button\";\n\nexport default function Main() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [ants, setAnts] = useState([]);\n    const [getDataClicked, setgetDataClicked] = useState(false);\n    const [raceState, setRaceState] = useState('Not yet run');\n\n    const onGetDataClick = () => {\n        setgetDataClicked(true);\n        fetch(\"https://sg-ants-server.herokuapp.com/ants\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              result.ants[0].calculation = 'Not yet run';\n              result.ants[1].calculation = 'Not yet run';\n              result.ants[2].calculation = 'Not yet run';\n              result.ants[3].calculation = 'Not yet run';\n              result.ants[4].calculation = 'Not yet run';\n\n              result.ants[0].likelihood = 0;\n              result.ants[1].likelihood = 0;\n              result.ants[2].likelihood = 0;\n              result.ants[3].likelihood = 0;\n              result.ants[4].likelihood = 0;\n\n              setIsLoaded(true);\n              setAnts(Object.keys(result).map((key) => result[key])[0]);\n              setgetDataClicked(false);\n\n            },\n            (error) => {\n              setIsLoaded(true);\n              setError(error);\n            }\n        )\n    }\n\n    const onStartRaceClick = () => {\n        setRaceState(\"In progress...\");\n        var theAnts = ants.map(l => Object.assign({}, l));\n\n        for (var i = 0; i < ants.length; i++){\n          theAnts[i].calculation = 'In progress';\n          setAnts(theAnts);\n          calculateLikelihood(ants[i], i);\n        }\n      };\n\n    const checkRaceState = () => {\n      var completedCount = 0\n      var theAnts = ants.map(l => Object.assign({}, l));\n      theAnts = theAnts.sort((a, b) => b.likelihood - a.likelihood);\n      setAnts(theAnts);\n\n      for (var i = 0; i < ants.length; i++) {\n        if (ants[i].calculation == 'Calculated'){\n          completedCount += 1\n        }\n      }\n      if (completedCount == ants.length){\n        setRaceState(\"Calculated\");\n      }\n    }\n\n    const calculate = (ant) => {\n      return new Promise((resolve) => {\n          resolve(ant);\n      });\n    };\n\n    const calculateLikelihood = (ant, index) => { \n      const generateCalculation = generateAntWinLikelihoodCalculator();\n      ants[index].calculation = 'In progress';\n\n      return generateCalculation((ant) => {\n        calculate(ant).then((calculation) => {\n          ants[index].likelihood = calculation\n          ants[index].calculation = 'Calculated';\n          checkRaceState();\n        });\n      });\n    };\n\n      function generateAntWinLikelihoodCalculator() {\n        const delay = 7000 + Math.random() * 7000;\n        const likelihoodOfAntWinning = Math.random();\n      \n        return (callback) => {\n          setTimeout(() => {\n            callback(likelihoodOfAntWinning);\n          }, delay);\n        };\n      }\n\n\n    // Table Rows and Columns\n\n    var data = ants\n\n    const columns = React.useMemo(\n        () => [\n          {\n            Header: 'Name',\n            accessor: 'name', \n          },\n          {\n            Header: 'Length',\n            accessor: 'length',\n          },\n          {\n            Header: 'Color',\n            accessor: 'color',\n          },\n          {\n            Header: 'Weight',\n            accessor: 'weight',\n          },\n          {\n            Header: 'State of Calcluation',\n            accessor: 'calculation',\n          },\n          {\n            Header: 'Win Likelihood',\n            accessor: 'likelihood',\n          },\n        ],\n        []\n    )\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n      } = useTable({ columns, data })\n    \n    const renderStep = () => {\n        if (error) {\n            return <div>Error retrieving ant data</div>;\n          } else if (getDataClicked){\n            return <div>Loading ant data...</div>;\n          } else {\n            return (\n                <RowFlex>\n                <ColumnFlex>\n                <RowFlex>\n                    <Button onClick={onGetDataClick}>GET DATA</Button>\n                    <Button onClick={onStartRaceClick} style={{marginLeft: \"15px\", backgroundColor:\"#38782A\"}}>START RACE</Button>\n                </RowFlex>\n                <RowFlex>\n                    <HeavyText>\"STATE OF THE RACE: \"</HeavyText>\n                    <LightText>{raceState}</LightText>\n                </RowFlex>\n                <RowFlex>\n                <table {...getTableProps()} style={{ border: 'solid 1px gray' }}>\n                    <thead>\n                        {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                            <th\n                                {...column.getHeaderProps()}\n                                style={{\n                                background: 'aliceblue',\n                                color: 'black',\n                                fontWeight: 'bold',\n                                }}\n                            >\n                                {column.render('Header')}\n                            </th>\n                            ))}\n                        </tr>\n                        ))}\n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                        {rows.map(row => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                                return (\n                                <td\n                                    {...cell.getCellProps()}\n                                    style={{\n                                    padding: '12px'\n                                    }}\n                                >\n                                    {cell.render('Cell')}\n                                </td>\n                                )\n                            })}\n                            </tr>\n                        )\n                        })}\n                    </tbody>\n                    </table>\n                </RowFlex>\n                </ColumnFlex>\n                </RowFlex>\n            );\n          }\n    }\n\n  return (\n    <Screen>\n        {renderStep()}\n    </Screen>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}